<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/mvc  
            http://www.springframework.org/schema/mvc/spring-mvc.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context.xsd
            http://code.alibabatech.com/schema/dubbo 
            http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
	default-lazy-init="true">
	<!-- xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" 是dubbo标签引用需要的↑↑↑↑↑↑ -->
	<!-- 通过mvc:resources设置静态资源，这样servlet就会处理这些静态资源，而不通过控制器 -->
	<!-- 设置不过滤内容，比如:css,jquery,img 等资源文件 -->
	<mvc:resources location="/*.html" mapping="/**.html" />
	<mvc:resources location="/css/*" mapping="/css/**" />
	<mvc:resources location="/js/*" mapping="/js/**" />
	<mvc:resources location="/images/*" mapping="/images/**" />

	<!-- 添加注解驱动 -->
	<mvc:annotation-driven />
	<!-- 默认扫描的包路径 -->
	<context:component-scan base-package="com.zpl" />
	<!--我们需要引入配置文件,通过下面来引入指定文件 <context:property-placeholder>标签提供了一种优雅的外在化参数配置的方式， 
		不过该标签在Spring配置文件中只能存在一份！！！ -->
	<context:property-placeholder location="classpath*:config/*.properties" />
	<!-- mvc:view-controller可以在不需要Controller处理request的情况，转向到设置的View -->
	<!-- 像下面这样设置，如果请求为/，则不通过controller，而直接解析为/index.jsp -->
	<mvc:view-controller path="/" view-name="index" />
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView"></property>
		<!-- 配置jsp路径前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<!-- 配置URl后缀 -->
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 指定数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- 指定数据源结束 -->
	<!-- 定义默认的jdbc模板 -->
	<bean id="defaultJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" /><!-- 引用数据源 -->
		</property>
	</bean>
	<!-- 定义默认的jdbc模板结束 -->
	<!-- <dubbo:application name="demo-provider"/>用于配置当前应用信息，不管该应用是提供者还是消费者 
		<dubbo:registry address="multicast://224.5.6.7:1234"/>注册中心配置 使用zookeeper注册中心暴露服务地址 
		即zookeeper的所在服务器ip地址和端口号 <dubbo:registry address="zookeeper://10.1.33.10:2181"/> 
		用dubbo协议在20880端口暴露服务 <dubbo:protocol name="dubbo" port="20880"/>用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受 
		<dubbo:service interface="com.zpl.dubbo.IDubboProviderService" ref="demoService"/> -->
	<!-- Spring中引入其他配置文件 -->
	<import resource="classpath*:/spring/spring-redis.xml" />


</beans> 